/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Season as PrismaSeason,
  Meet as PrismaMeet,
} from "@prisma/client";

export class SeasonServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SeasonCountArgs, "select">): Promise<number> {
    return this.prisma.season.count(args);
  }

  async seasons(args: Prisma.SeasonFindManyArgs): Promise<PrismaSeason[]> {
    return this.prisma.season.findMany(args);
  }
  async season(
    args: Prisma.SeasonFindUniqueArgs
  ): Promise<PrismaSeason | null> {
    return this.prisma.season.findUnique(args);
  }
  async createSeason(args: Prisma.SeasonCreateArgs): Promise<PrismaSeason> {
    return this.prisma.season.create(args);
  }
  async updateSeason(args: Prisma.SeasonUpdateArgs): Promise<PrismaSeason> {
    return this.prisma.season.update(args);
  }
  async deleteSeason(args: Prisma.SeasonDeleteArgs): Promise<PrismaSeason> {
    return this.prisma.season.delete(args);
  }

  async findMeets(
    parentId: string,
    args: Prisma.MeetFindManyArgs
  ): Promise<PrismaMeet[]> {
    return this.prisma.season
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .meets(args);
  }
}
