/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Athlete as PrismaAthlete,
  Result as PrismaResult,
} from "@prisma/client";

export class AthleteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AthleteCountArgs, "select">): Promise<number> {
    return this.prisma.athlete.count(args);
  }

  async athletes(args: Prisma.AthleteFindManyArgs): Promise<PrismaAthlete[]> {
    return this.prisma.athlete.findMany(args);
  }
  async athlete(
    args: Prisma.AthleteFindUniqueArgs
  ): Promise<PrismaAthlete | null> {
    return this.prisma.athlete.findUnique(args);
  }
  async createAthlete(args: Prisma.AthleteCreateArgs): Promise<PrismaAthlete> {
    return this.prisma.athlete.create(args);
  }
  async updateAthlete(args: Prisma.AthleteUpdateArgs): Promise<PrismaAthlete> {
    return this.prisma.athlete.update(args);
  }
  async deleteAthlete(args: Prisma.AthleteDeleteArgs): Promise<PrismaAthlete> {
    return this.prisma.athlete.delete(args);
  }

  async findResults(
    parentId: string,
    args: Prisma.ResultFindManyArgs
  ): Promise<PrismaResult[]> {
    return this.prisma.athlete
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .results(args);
  }
}
