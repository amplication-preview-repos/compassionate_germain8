/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Meet } from "./Meet";
import { MeetCountArgs } from "./MeetCountArgs";
import { MeetFindManyArgs } from "./MeetFindManyArgs";
import { MeetFindUniqueArgs } from "./MeetFindUniqueArgs";
import { CreateMeetArgs } from "./CreateMeetArgs";
import { UpdateMeetArgs } from "./UpdateMeetArgs";
import { DeleteMeetArgs } from "./DeleteMeetArgs";
import { ResultFindManyArgs } from "../../result/base/ResultFindManyArgs";
import { Result } from "../../result/base/Result";
import { Season } from "../../season/base/Season";
import { MeetService } from "../meet.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Meet)
export class MeetResolverBase {
  constructor(
    protected readonly service: MeetService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Meet",
    action: "read",
    possession: "any",
  })
  async _meetsMeta(
    @graphql.Args() args: MeetCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Meet])
  @nestAccessControl.UseRoles({
    resource: "Meet",
    action: "read",
    possession: "any",
  })
  async meets(@graphql.Args() args: MeetFindManyArgs): Promise<Meet[]> {
    return this.service.meets(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Meet, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Meet",
    action: "read",
    possession: "own",
  })
  async meet(@graphql.Args() args: MeetFindUniqueArgs): Promise<Meet | null> {
    const result = await this.service.meet(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Meet)
  @nestAccessControl.UseRoles({
    resource: "Meet",
    action: "create",
    possession: "any",
  })
  async createMeet(@graphql.Args() args: CreateMeetArgs): Promise<Meet> {
    return await this.service.createMeet({
      ...args,
      data: {
        ...args.data,

        season: args.data.season
          ? {
              connect: args.data.season,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Meet)
  @nestAccessControl.UseRoles({
    resource: "Meet",
    action: "update",
    possession: "any",
  })
  async updateMeet(@graphql.Args() args: UpdateMeetArgs): Promise<Meet | null> {
    try {
      return await this.service.updateMeet({
        ...args,
        data: {
          ...args.data,

          season: args.data.season
            ? {
                connect: args.data.season,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Meet)
  @nestAccessControl.UseRoles({
    resource: "Meet",
    action: "delete",
    possession: "any",
  })
  async deleteMeet(@graphql.Args() args: DeleteMeetArgs): Promise<Meet | null> {
    try {
      return await this.service.deleteMeet(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Result], { name: "results" })
  @nestAccessControl.UseRoles({
    resource: "Result",
    action: "read",
    possession: "any",
  })
  async findResults(
    @graphql.Parent() parent: Meet,
    @graphql.Args() args: ResultFindManyArgs
  ): Promise<Result[]> {
    const results = await this.service.findResults(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Season, {
    nullable: true,
    name: "season",
  })
  @nestAccessControl.UseRoles({
    resource: "Season",
    action: "read",
    possession: "any",
  })
  async getSeason(@graphql.Parent() parent: Meet): Promise<Season | null> {
    const result = await this.service.getSeason(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
