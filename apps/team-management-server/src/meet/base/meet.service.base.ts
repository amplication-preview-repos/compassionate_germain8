/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Meet as PrismaMeet,
  Result as PrismaResult,
  Season as PrismaSeason,
} from "@prisma/client";

export class MeetServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MeetCountArgs, "select">): Promise<number> {
    return this.prisma.meet.count(args);
  }

  async meets(args: Prisma.MeetFindManyArgs): Promise<PrismaMeet[]> {
    return this.prisma.meet.findMany(args);
  }
  async meet(args: Prisma.MeetFindUniqueArgs): Promise<PrismaMeet | null> {
    return this.prisma.meet.findUnique(args);
  }
  async createMeet(args: Prisma.MeetCreateArgs): Promise<PrismaMeet> {
    return this.prisma.meet.create(args);
  }
  async updateMeet(args: Prisma.MeetUpdateArgs): Promise<PrismaMeet> {
    return this.prisma.meet.update(args);
  }
  async deleteMeet(args: Prisma.MeetDeleteArgs): Promise<PrismaMeet> {
    return this.prisma.meet.delete(args);
  }

  async findResults(
    parentId: string,
    args: Prisma.ResultFindManyArgs
  ): Promise<PrismaResult[]> {
    return this.prisma.meet
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .results(args);
  }

  async getSeason(parentId: string): Promise<PrismaSeason | null> {
    return this.prisma.meet
      .findUnique({
        where: { id: parentId },
      })
      .season();
  }
}
